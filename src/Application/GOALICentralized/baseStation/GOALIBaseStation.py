#!/usr/bin/env python

# This is a quick and dirty example of how to use the MoteIF interface in
# Python


import os
import httplib
from tinyos.message import MoteIF
from threading import Thread

goali_server = "web.sld.cs.columbia.edu"
request = "/goali_central/goali/call/run/insert_report_central?"

class SerialForwarder(Thread):
	def __init__ (self):
		Thread.__init__(self)
	def run(self):
		os.system("./sf/sf 9002 /dev/ttyUSB0 115200")
      

class MyClass:
	def __init__(self):
		# Create a MoteIF
		self.mif = MoteIF.MoteIF()
		# Attach a source to it
		self.source = self.mif.addSource("sf@localhost:9001")

		 # SomeMessageClass.py would be generated by MIG
		self.mif.addListener(self, GoaliSerialMsg)
		self.conn = httplib.HTTPConnection(goali_server)

	# Called by the MoteIF's receive thread when a new message
	# is received
	def receive(self, src, msg):
		print "Received message: "+ str(msg)
		#self.conn = httplib.HTTPConnection(goali_server)
                url_request = "%snode=%s&value=%s&counter=%s&run=%s"%(request, msg.get_node_id(), msg.get_value(), msg.get_counter(), "1")
		print url_request
		#self.conn.request("GET", url_request)
		#r1 = self.conn.getresponse()


if __name__ == "__main__":
	if not os.path.exists("./sf/sf"): 
		print "Missing Serial Forwarder"
		print "Goto ./sf and do"
		print "./bootstrap"
		print "./configure"
		print "make"
		exit()


	try:
		print "Clean *SerialMsg Files"
		os.remove("*SerialMsg.py*")
	except:
		pass

	try:
		print "MIG GoaliSerialMsg Files"
		os.system("mig python -target=null -python-classname=GoaliSerialMsg ../GOALICentralizedApp.h goali_centralized_msg -o GoaliSerialMsg.py")

		from GoaliSerialMsg import *
	except:
		print "Failed to generate python class"
		exit()

	try:
		print "Starting Serial Forwarder"
		#t = SerialForwarder()
		#t.start()
	except:
		print "Failed to start Serial Forwarder"
		exit()


	m = MyClass()

#	m.testURL()

