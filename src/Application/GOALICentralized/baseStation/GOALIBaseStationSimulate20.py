#!/usr/bin/env python

# This is a quick and dirty example of how to use the MoteIF interface in
# Python


import os
import sys
import httplib
import time
from tinyos.message import MoteIF
from threading import Thread
import threading

goali_server = "web.sld.cs.columbia.edu"
request = "/goali_central/goali/call/run/report_central_19_simulate?"
thread_file = "/tmp/thread_count.txt"

class ReportCentral(Thread):
	def __init__(self, msg, run_id):
        	Thread.__init__(self)
		self.max_threads = 200
        	self.msg=msg
        	self.run_id = run_id
		self.counter = 0


	def run(self):

		threadcount = threading.active_count()

		if (threadcount % 25 == 0):
			print "Threadcount is %d\n"%(threadcount)
			
		if ((threadcount > self.max_threads) or (threadcount < 25)):
			thread_fd = open(thread_file, 'w')
			thread_fd.write("%d"%(threadcount))
	        	thread_fd.close()

	        #print "Received message: "+ str(self.msg)
		status = 0
		while (status != 200):
		        conn = httplib.HTTPConnection(goali_server)
        		url_request = "%snode=%s&counter=%s&value=%s&run_id=%s"%(request,
        		self.msg.get_node_id(), self.msg.get_counter(), self.msg.get_value(), self.run_id)
		        #print url_request
			print self.msg.get_counter()
        		conn.request("GET", url_request)
		        r1 = conn.getresponse()
			status = r1.status
			#print status
			time.sleep(0.1)
			conn.close()

		threadcount = threading.active_count()

		if (threadcount % 25 == 0):
                        print "Threadcount is %d\n"%(threadcount)

		if ((threadcount > self.max_threads) or (threadcount < 25)):
			thread_fd = open(thread_file, 'w')
			thread_fd.write("%d"%(threadcount))
	        	thread_fd.close()
		sys.exit()
		

class SerialForwarder(Thread):
	def __init__ (self):
		Thread.__init__(self)
	def run(self):
		os.system("./sf/sf 9002 /dev/ttyUSB0 115200")
      

class MyClass:
	def __init__(self, run_id):
		self.run_id = run_id
		# Create a MoteIF
		self.mif = MoteIF.MoteIF()
		# Attach a source to it
		self.source = self.mif.addSource("sf@localhost:9001")

		 # SomeMessageClass.py would be generated by MIG
		self.mif.addListener(self, GoaliSerialMsg)
		self.conn = httplib.HTTPConnection(goali_server)
		self.check_count = 0

	# Called by the MoteIF's receive thread when a new message
	# is received
	def receive(self, src, msg):
		t = ReportCentral(msg, self.run_id)
		t.start()


if __name__ == "__main__":

	thread_fd = open(thread_file, 'w')
        thread_fd.write("0")
        thread_fd.close()


	if len(sys.argv) != 2:
		print "Must enter run id"
		exit()

	if not os.path.exists("./sf/sf"): 
		print "Missing Serial Forwarder"
		print "Goto ./sf and do"
		print "./bootstrap"
		print "./configure"
		print "make"
		exit()


	try:
		print "Clean *SerialMsg Files"
		os.remove("*SerialMsg.py*")
	except:
		pass

	try:
		print "MIG GoaliSerialMsg Files"
		os.system("mig python -target=null -python-classname=GoaliSerialMsg ../GOALICentralizedApp.h goali_centralized_msg -o GoaliSerialMsg.py")

		from GoaliSerialMsg import *
	except:
		print "Failed to generate python class"
		exit()

	try:
		print "Starting Serial Forwarder"
	except:
		print "Failed to start Serial Forwarder"
		exit()


	m = MyClass(sys.argv[1])

