/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'DebugMsg'
 * message type.
 */

public class DebugMsg extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 8;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 100;

    /** Create a new DebugMsg of size 8. */
    public DebugMsg() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new DebugMsg of the given data_length. */
    public DebugMsg(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new DebugMsg with the given data_length
     * and base offset.
     */
    public DebugMsg(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new DebugMsg using the given byte array
     * as backing store.
     */
    public DebugMsg(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new DebugMsg using the given byte array
     * as backing store, with the given base offset.
     */
    public DebugMsg(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new DebugMsg using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public DebugMsg(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new DebugMsg embedded in the given message
     * at the given base offset.
     */
    public DebugMsg(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new DebugMsg embedded in the given message
     * at the given base offset and length.
     */
    public DebugMsg(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <DebugMsg> \n";
      try {
        s += "  [process=0x"+Long.toHexString(get_process())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [layer=0x"+Long.toHexString(get_layer())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [state=0x"+Long.toHexString(get_state())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [d0=0x"+Long.toHexString(get_d0())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [d1=0x"+Long.toHexString(get_d1())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: process
    //   Field type: short, unsigned
    //   Offset (bits): 0
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'process' is signed (false).
     */
    public static boolean isSigned_process() {
        return false;
    }

    /**
     * Return whether the field 'process' is an array (false).
     */
    public static boolean isArray_process() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'process'
     */
    public static int offset_process() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'process'
     */
    public static int offsetBits_process() {
        return 0;
    }

    /**
     * Return the value (as a short) of the field 'process'
     */
    public short get_process() {
        return (short)getUIntElement(offsetBits_process(), 8);
    }

    /**
     * Set the value of the field 'process'
     */
    public void set_process(short value) {
        setUIntElement(offsetBits_process(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'process'
     */
    public static int size_process() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'process'
     */
    public static int sizeBits_process() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: layer
    //   Field type: short, unsigned
    //   Offset (bits): 8
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'layer' is signed (false).
     */
    public static boolean isSigned_layer() {
        return false;
    }

    /**
     * Return whether the field 'layer' is an array (false).
     */
    public static boolean isArray_layer() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'layer'
     */
    public static int offset_layer() {
        return (8 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'layer'
     */
    public static int offsetBits_layer() {
        return 8;
    }

    /**
     * Return the value (as a short) of the field 'layer'
     */
    public short get_layer() {
        return (short)getUIntElement(offsetBits_layer(), 8);
    }

    /**
     * Set the value of the field 'layer'
     */
    public void set_layer(short value) {
        setUIntElement(offsetBits_layer(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'layer'
     */
    public static int size_layer() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'layer'
     */
    public static int sizeBits_layer() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: state
    //   Field type: short, unsigned
    //   Offset (bits): 16
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'state' is signed (false).
     */
    public static boolean isSigned_state() {
        return false;
    }

    /**
     * Return whether the field 'state' is an array (false).
     */
    public static boolean isArray_state() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'state'
     */
    public static int offset_state() {
        return (16 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'state'
     */
    public static int offsetBits_state() {
        return 16;
    }

    /**
     * Return the value (as a short) of the field 'state'
     */
    public short get_state() {
        return (short)getUIntElement(offsetBits_state(), 8);
    }

    /**
     * Set the value of the field 'state'
     */
    public void set_state(short value) {
        setUIntElement(offsetBits_state(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'state'
     */
    public static int size_state() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'state'
     */
    public static int sizeBits_state() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: d0
    //   Field type: int, unsigned
    //   Offset (bits): 32
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'd0' is signed (false).
     */
    public static boolean isSigned_d0() {
        return false;
    }

    /**
     * Return whether the field 'd0' is an array (false).
     */
    public static boolean isArray_d0() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'd0'
     */
    public static int offset_d0() {
        return (32 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'd0'
     */
    public static int offsetBits_d0() {
        return 32;
    }

    /**
     * Return the value (as a int) of the field 'd0'
     */
    public int get_d0() {
        return (int)getUIntElement(offsetBits_d0(), 16);
    }

    /**
     * Set the value of the field 'd0'
     */
    public void set_d0(int value) {
        setUIntElement(offsetBits_d0(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'd0'
     */
    public static int size_d0() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'd0'
     */
    public static int sizeBits_d0() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: d1
    //   Field type: int, unsigned
    //   Offset (bits): 48
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'd1' is signed (false).
     */
    public static boolean isSigned_d1() {
        return false;
    }

    /**
     * Return whether the field 'd1' is an array (false).
     */
    public static boolean isArray_d1() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'd1'
     */
    public static int offset_d1() {
        return (48 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'd1'
     */
    public static int offsetBits_d1() {
        return 48;
    }

    /**
     * Return the value (as a int) of the field 'd1'
     */
    public int get_d1() {
        return (int)getUIntElement(offsetBits_d1(), 16);
    }

    /**
     * Set the value of the field 'd1'
     */
    public void set_d1(int value) {
        setUIntElement(offsetBits_d1(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'd1'
     */
    public static int size_d1() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'd1'
     */
    public static int sizeBits_d1() {
        return 16;
    }

}
