#
# This class is automatically generated by mig. DO NOT EDIT THIS FILE.
# This class implements a Python interface to the 'Z1Msg'
# message type.
#

import tinyos.message.Message

# The default size of this message type in bytes.
DEFAULT_MESSAGE_SIZE = 24

# The Active Message type associated with this message.
AM_TYPE = 100

class Z1Msg(tinyos.message.Message.Message):
    # Create a new Z1Msg of size 24.
    def __init__(self, data="", addr=None, gid=None, base_offset=0, data_length=24):
        tinyos.message.Message.Message.__init__(self, data, addr, gid, base_offset, data_length)
        self.amTypeSet(AM_TYPE)
    
    # Get AM_TYPE
    def get_amType(cls):
        return AM_TYPE
    
    get_amType = classmethod(get_amType)
    
    #
    # Return a String representation of this message. Includes the
    # message type name and the non-indexed field values.
    #
    def __str__(self):
        s = "Message <Z1Msg> \n"
        try:
            s += "  [seq=0x%x]\n" % (self.get_seq())
        except:
            pass
        try:
            s += "  [src=0x%x]\n" % (self.get_src())
        except:
            pass
        try:
            s += "  [temp=0x%x]\n" % (self.get_temp())
        except:
            pass
        try:
            s += "  [battery=0x%x]\n" % (self.get_battery())
        except:
            pass
        try:
            s += "  [adc=";
            for i in range(0, 4):
                s += "0x%x " % (self.getElement_adc(i) & 0xffff)
            s += "]\n";
        except:
            pass
        try:
            s += "  [accel=";
            for i in range(0, 3):
                s += "0x%x " % (self.getElement_accel(i) & 0xffff)
            s += "]\n";
        except:
            pass
        return s

    # Message-type-specific access methods appear below.

    #
    # Accessor methods for field: seq
    #   Field type: long
    #   Offset (bits): 0
    #   Size (bits): 32
    #

    #
    # Return whether the field 'seq' is signed (False).
    #
    def isSigned_seq(self):
        return False
    
    #
    # Return whether the field 'seq' is an array (False).
    #
    def isArray_seq(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'seq'
    #
    def offset_seq(self):
        return (0 / 8)
    
    #
    # Return the offset (in bits) of the field 'seq'
    #
    def offsetBits_seq(self):
        return 0
    
    #
    # Return the value (as a long) of the field 'seq'
    #
    def get_seq(self):
        return self.getUIntElement(self.offsetBits_seq(), 32, 1)
    
    #
    # Set the value of the field 'seq'
    #
    def set_seq(self, value):
        self.setUIntElement(self.offsetBits_seq(), 32, value, 1)
    
    #
    # Return the size, in bytes, of the field 'seq'
    #
    def size_seq(self):
        return (32 / 8)
    
    #
    # Return the size, in bits, of the field 'seq'
    #
    def sizeBits_seq(self):
        return 32
    
    #
    # Accessor methods for field: src
    #   Field type: int
    #   Offset (bits): 32
    #   Size (bits): 16
    #

    #
    # Return whether the field 'src' is signed (False).
    #
    def isSigned_src(self):
        return False
    
    #
    # Return whether the field 'src' is an array (False).
    #
    def isArray_src(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'src'
    #
    def offset_src(self):
        return (32 / 8)
    
    #
    # Return the offset (in bits) of the field 'src'
    #
    def offsetBits_src(self):
        return 32
    
    #
    # Return the value (as a int) of the field 'src'
    #
    def get_src(self):
        return self.getUIntElement(self.offsetBits_src(), 16, 1)
    
    #
    # Set the value of the field 'src'
    #
    def set_src(self, value):
        self.setUIntElement(self.offsetBits_src(), 16, value, 1)
    
    #
    # Return the size, in bytes, of the field 'src'
    #
    def size_src(self):
        return (16 / 8)
    
    #
    # Return the size, in bits, of the field 'src'
    #
    def sizeBits_src(self):
        return 16
    
    #
    # Accessor methods for field: temp
    #   Field type: int
    #   Offset (bits): 48
    #   Size (bits): 16
    #

    #
    # Return whether the field 'temp' is signed (False).
    #
    def isSigned_temp(self):
        return False
    
    #
    # Return whether the field 'temp' is an array (False).
    #
    def isArray_temp(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'temp'
    #
    def offset_temp(self):
        return (48 / 8)
    
    #
    # Return the offset (in bits) of the field 'temp'
    #
    def offsetBits_temp(self):
        return 48
    
    #
    # Return the value (as a int) of the field 'temp'
    #
    def get_temp(self):
        return self.getUIntElement(self.offsetBits_temp(), 16, 1)
    
    #
    # Set the value of the field 'temp'
    #
    def set_temp(self, value):
        self.setUIntElement(self.offsetBits_temp(), 16, value, 1)
    
    #
    # Return the size, in bytes, of the field 'temp'
    #
    def size_temp(self):
        return (16 / 8)
    
    #
    # Return the size, in bits, of the field 'temp'
    #
    def sizeBits_temp(self):
        return 16
    
    #
    # Accessor methods for field: battery
    #   Field type: int
    #   Offset (bits): 64
    #   Size (bits): 16
    #

    #
    # Return whether the field 'battery' is signed (False).
    #
    def isSigned_battery(self):
        return False
    
    #
    # Return whether the field 'battery' is an array (False).
    #
    def isArray_battery(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'battery'
    #
    def offset_battery(self):
        return (64 / 8)
    
    #
    # Return the offset (in bits) of the field 'battery'
    #
    def offsetBits_battery(self):
        return 64
    
    #
    # Return the value (as a int) of the field 'battery'
    #
    def get_battery(self):
        return self.getUIntElement(self.offsetBits_battery(), 16, 1)
    
    #
    # Set the value of the field 'battery'
    #
    def set_battery(self, value):
        self.setUIntElement(self.offsetBits_battery(), 16, value, 1)
    
    #
    # Return the size, in bytes, of the field 'battery'
    #
    def size_battery(self):
        return (16 / 8)
    
    #
    # Return the size, in bits, of the field 'battery'
    #
    def sizeBits_battery(self):
        return 16
    
    #
    # Accessor methods for field: adc
    #   Field type: int[]
    #   Offset (bits): 80
    #   Size of each element (bits): 16
    #

    #
    # Return whether the field 'adc' is signed (False).
    #
    def isSigned_adc(self):
        return False
    
    #
    # Return whether the field 'adc' is an array (True).
    #
    def isArray_adc(self):
        return True
    
    #
    # Return the offset (in bytes) of the field 'adc'
    #
    def offset_adc(self, index1):
        offset = 80
        if index1 < 0 or index1 >= 4:
            raise IndexError
        offset += 0 + index1 * 16
        return (offset / 8)
    
    #
    # Return the offset (in bits) of the field 'adc'
    #
    def offsetBits_adc(self, index1):
        offset = 80
        if index1 < 0 or index1 >= 4:
            raise IndexError
        offset += 0 + index1 * 16
        return offset
    
    #
    # Return the entire array 'adc' as a int[]
    #
    def get_adc(self):
        tmp = [None]*4
        for index0 in range (0, self.numElements_adc(0)):
                tmp[index0] = self.getElement_adc(index0)
        return tmp
    
    #
    # Set the contents of the array 'adc' from the given int[]
    #
    def set_adc(self, value):
        for index0 in range(0, len(value)):
            self.setElement_adc(index0, value[index0])

    #
    # Return an element (as a int) of the array 'adc'
    #
    def getElement_adc(self, index1):
        return self.getUIntElement(self.offsetBits_adc(index1), 16, 1)
    
    #
    # Set an element of the array 'adc'
    #
    def setElement_adc(self, index1, value):
        self.setUIntElement(self.offsetBits_adc(index1), 16, value, 1)
    
    #
    # Return the total size, in bytes, of the array 'adc'
    #
    def totalSize_adc(self):
        return (64 / 8)
    
    #
    # Return the total size, in bits, of the array 'adc'
    #
    def totalSizeBits_adc(self):
        return 64
    
    #
    # Return the size, in bytes, of each element of the array 'adc'
    #
    def elementSize_adc(self):
        return (16 / 8)
    
    #
    # Return the size, in bits, of each element of the array 'adc'
    #
    def elementSizeBits_adc(self):
        return 16
    
    #
    # Return the number of dimensions in the array 'adc'
    #
    def numDimensions_adc(self):
        return 1
    
    #
    # Return the number of elements in the array 'adc'
    #
    def numElements_adc():
        return 4
    
    #
    # Return the number of elements in the array 'adc'
    # for the given dimension.
    #
    def numElements_adc(self, dimension):
        array_dims = [ 4,  ]
        if dimension < 0 or dimension >= 1:
            raise IndexException
        if array_dims[dimension] == 0:
            raise IndexError
        return array_dims[dimension]
    
    #
    # Accessor methods for field: accel
    #   Field type: int[]
    #   Offset (bits): 144
    #   Size of each element (bits): 16
    #

    #
    # Return whether the field 'accel' is signed (False).
    #
    def isSigned_accel(self):
        return False
    
    #
    # Return whether the field 'accel' is an array (True).
    #
    def isArray_accel(self):
        return True
    
    #
    # Return the offset (in bytes) of the field 'accel'
    #
    def offset_accel(self, index1):
        offset = 144
        if index1 < 0 or index1 >= 3:
            raise IndexError
        offset += 0 + index1 * 16
        return (offset / 8)
    
    #
    # Return the offset (in bits) of the field 'accel'
    #
    def offsetBits_accel(self, index1):
        offset = 144
        if index1 < 0 or index1 >= 3:
            raise IndexError
        offset += 0 + index1 * 16
        return offset
    
    #
    # Return the entire array 'accel' as a int[]
    #
    def get_accel(self):
        tmp = [None]*3
        for index0 in range (0, self.numElements_accel(0)):
                tmp[index0] = self.getElement_accel(index0)
        return tmp
    
    #
    # Set the contents of the array 'accel' from the given int[]
    #
    def set_accel(self, value):
        for index0 in range(0, len(value)):
            self.setElement_accel(index0, value[index0])

    #
    # Return an element (as a int) of the array 'accel'
    #
    def getElement_accel(self, index1):
        return self.getUIntElement(self.offsetBits_accel(index1), 16, 1)
    
    #
    # Set an element of the array 'accel'
    #
    def setElement_accel(self, index1, value):
        self.setUIntElement(self.offsetBits_accel(index1), 16, value, 1)
    
    #
    # Return the total size, in bytes, of the array 'accel'
    #
    def totalSize_accel(self):
        return (48 / 8)
    
    #
    # Return the total size, in bits, of the array 'accel'
    #
    def totalSizeBits_accel(self):
        return 48
    
    #
    # Return the size, in bytes, of each element of the array 'accel'
    #
    def elementSize_accel(self):
        return (16 / 8)
    
    #
    # Return the size, in bits, of each element of the array 'accel'
    #
    def elementSizeBits_accel(self):
        return 16
    
    #
    # Return the number of dimensions in the array 'accel'
    #
    def numDimensions_accel(self):
        return 1
    
    #
    # Return the number of elements in the array 'accel'
    #
    def numElements_accel():
        return 3
    
    #
    # Return the number of elements in the array 'accel'
    # for the given dimension.
    #
    def numElements_accel(self, dimension):
        array_dims = [ 3,  ]
        if dimension < 0 or dimension >= 1:
            raise IndexException
        if array_dims[dimension] == 0:
            raise IndexError
        return array_dims[dimension]
    
