#ifndef __HASHING_FENNEC_H_
#define __HASHING_FENNEC_H_

/*

Author: Marcin Szczodrak

*/

/* Pearson hashing - based on 
	Peter K. Pearson, "Fast hashing of variable-length text strings"
	Volume 33 Issue 6, June 1990
	http://portal.acm.org/citation.cfm?id=78978
*/

uint8_t pearson_hash_table[256] = {
        1,87,49,12,176,178,102,166,121,193,6,84,249,230,44,163,
        14,197,213,181,161,85,218,80,64,239,24,226,236,142,38,200,
        110,177,104,103,141,253,255,50,77,101,81,18,45,96,31,222,
        25,107,190,70,86,237,240,34,72,242,20,214,244,227,149,235,
        97,234,57,22,60,250,82,175,208,5,127,199,111,62,135,248,
        174,169,211,58,66,154,106,195,245,171,17,187,182,179,0,243,
        132,56,148,75,128,133,158,100,130,126,91,13,153,246,216,219,
        119,68,223,78,83,88,201,99,122,11,92,32,136,114,52,10,
        138,30,48,183,156,35,61,26,143,74,251,94,129,162,63,152,
        170,7,115,167,241,206,3,150,55,59,151,220,90,53,23,131,
        125,173,15,238,79,95,89,16,105,137,225,224,217,160,37,123,
        118,73,2,157,46,116,9,145,134,228,207,212,202,215,69,229,
        27,188,67,124,168,252,42,4,29,108,21,247,19,205,39,203,
        233,40,186,147,198,192,155,33,164,191,98,204,165,180,117,76,
        140,36,210,172,41,54,159,8,185,232,113,196,231,47,146,120,
        51,65,28,144,254,221,93,189,194,139,112,43,71,109,184,20
                };

/* takes nx_uint8_t pointer to data buffer and lenght of the data
   returns nx_uint8_t hash value */
nx_uint8_t pearson_hashing(nx_uint8_t *data, uint16_t len) {
        uint8_t i;
        nx_uint8_t h;
        for(i = 0, h = 0; i < len; i++) {
                h = pearson_hash_table[h ^ data[i]];
        }
        return h;
}

/* Fletcher's checksum
	Fletcher, J. G., “An Arithmetic Checksum for Serial Transmissions"
	IEEE Trans. on Comm., Vol. COM-30, No. 1, January 1982, pp 247–252
	http://ieeexplore.ieee.org/xpls/abs_all.jsp?arnumber=1095369&tag=1
*/

/* takes nx_uint8_t pointer to data buffer and lenght of the data
   returns nx_uint16_t hash value */
nx_uint16_t fletcher16(nx_uint8_t* data, uint16_t len ) {
	nx_uint16_t s1, s2;
	int i;
	s1 = s2 = 0;
	for(i = 0; i < len; i++) {
		s1 = (s1 + data[i]) % 255;
		s2 = (s2 + s1) % 255;
	}
	return (s2 << 8) | s1;
}


/* CRC-16
	From linux/lib/crc16.c v.2.6.38

	Since it is from Linux
	This source code is licensed under the GNU General Public License,
	Version 2. See the file COPYING for more details.
*/

uint16_t const crc16_table[256] = {
	0x0000, 0xC0C1, 0xC181, 0x0140, 0xC301, 0x03C0, 0x0280, 0xC241,
	0xC601, 0x06C0, 0x0780, 0xC741, 0x0500, 0xC5C1, 0xC481, 0x0440,
	0xCC01, 0x0CC0, 0x0D80, 0xCD41, 0x0F00, 0xCFC1, 0xCE81, 0x0E40,
	0x0A00, 0xCAC1, 0xCB81, 0x0B40, 0xC901, 0x09C0, 0x0880, 0xC841,
	0xD801, 0x18C0, 0x1980, 0xD941, 0x1B00, 0xDBC1, 0xDA81, 0x1A40,
	0x1E00, 0xDEC1, 0xDF81, 0x1F40, 0xDD01, 0x1DC0, 0x1C80, 0xDC41,
	0x1400, 0xD4C1, 0xD581, 0x1540, 0xD701, 0x17C0, 0x1680, 0xD641,
	0xD201, 0x12C0, 0x1380, 0xD341, 0x1100, 0xD1C1, 0xD081, 0x1040,
	0xF001, 0x30C0, 0x3180, 0xF141, 0x3300, 0xF3C1, 0xF281, 0x3240,
	0x3600, 0xF6C1, 0xF781, 0x3740, 0xF501, 0x35C0, 0x3480, 0xF441,
	0x3C00, 0xFCC1, 0xFD81, 0x3D40, 0xFF01, 0x3FC0, 0x3E80, 0xFE41,
	0xFA01, 0x3AC0, 0x3B80, 0xFB41, 0x3900, 0xF9C1, 0xF881, 0x3840,
	0x2800, 0xE8C1, 0xE981, 0x2940, 0xEB01, 0x2BC0, 0x2A80, 0xEA41,
        0xEE01, 0x2EC0, 0x2F80, 0xEF41, 0x2D00, 0xEDC1, 0xEC81, 0x2C40,
        0xE401, 0x24C0, 0x2580, 0xE541, 0x2700, 0xE7C1, 0xE681, 0x2640,
        0x2200, 0xE2C1, 0xE381, 0x2340, 0xE101, 0x21C0, 0x2080, 0xE041,
        0xA001, 0x60C0, 0x6180, 0xA141, 0x6300, 0xA3C1, 0xA281, 0x6240,
        0x6600, 0xA6C1, 0xA781, 0x6740, 0xA501, 0x65C0, 0x6480, 0xA441,
        0x6C00, 0xACC1, 0xAD81, 0x6D40, 0xAF01, 0x6FC0, 0x6E80, 0xAE41,
        0xAA01, 0x6AC0, 0x6B80, 0xAB41, 0x6900, 0xA9C1, 0xA881, 0x6840,
        0x7800, 0xB8C1, 0xB981, 0x7940, 0xBB01, 0x7BC0, 0x7A80, 0xBA41,
        0xBE01, 0x7EC0, 0x7F80, 0xBF41, 0x7D00, 0xBDC1, 0xBC81, 0x7C40,
        0xB401, 0x74C0, 0x7580, 0xB541, 0x7700, 0xB7C1, 0xB681, 0x7640,
        0x7200, 0xB2C1, 0xB381, 0x7340, 0xB101, 0x71C0, 0x7080, 0xB041,
        0x5000, 0x90C1, 0x9181, 0x5140, 0x9301, 0x53C0, 0x5280, 0x9241,
        0x9601, 0x56C0, 0x5780, 0x9741, 0x5500, 0x95C1, 0x9481, 0x5440,
        0x9C01, 0x5CC0, 0x5D80, 0x9D41, 0x5F00, 0x9FC1, 0x9E81, 0x5E40,
        0x5A00, 0x9AC1, 0x9B81, 0x5B40, 0x9901, 0x59C0, 0x5880, 0x9841,
        0x8801, 0x48C0, 0x4980, 0x8941, 0x4B00, 0x8BC1, 0x8A81, 0x4A40,
        0x4E00, 0x8EC1, 0x8F81, 0x4F40, 0x8D01, 0x4DC0, 0x4C80, 0x8C41,
        0x4400, 0x84C1, 0x8581, 0x4540, 0x8701, 0x47C0, 0x4680, 0x8641,
        0x8201, 0x42C0, 0x4380, 0x8341, 0x4100, 0x81C1, 0x8081, 0x4040
	};

static inline uint16_t crc16_byte(uint16_t crc, const uint8_t data) {
	return (crc >> 8) ^ crc16_table[(crc ^ data) & 0xff];
}

uint16_t crc16(uint16_t crc, uint8_t const *buffer, uint16_t len) {
        while (len--)
                crc = crc16_byte(crc, *buffer++);
        return crc;
}


#endif

