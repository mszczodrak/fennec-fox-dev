# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_TOSSIM', [dirname(__file__)])
        except ImportError:
            import _TOSSIM
            return _TOSSIM
        if fp is not None:
            try:
                _mod = imp.load_module('_TOSSIM', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _TOSSIM = swig_import_helper()
    del swig_import_helper
else:
    import _TOSSIM
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class Radio(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Radio, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Radio, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _TOSSIM.new_Radio()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _TOSSIM.delete_Radio
    __del__ = lambda self : None;
    def add(self, *args): return _TOSSIM.Radio_add(self, *args)
    def gain(self, *args): return _TOSSIM.Radio_gain(self, *args)
    def connected(self, *args): return _TOSSIM.Radio_connected(self, *args)
    def remove(self, *args): return _TOSSIM.Radio_remove(self, *args)
    def setNoise(self, *args): return _TOSSIM.Radio_setNoise(self, *args)
    def setSensitivity(self, *args): return _TOSSIM.Radio_setSensitivity(self, *args)
Radio_swigregister = _TOSSIM.Radio_swigregister
Radio_swigregister(Radio)

class SEH(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SEH, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SEH, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _TOSSIM.new_SEH()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _TOSSIM.delete_SEH
    __del__ = lambda self : None;
    def solarCellSize(self): return _TOSSIM.SEH_solarCellSize(self)
    def solarCellEfficiency(self): return _TOSSIM.SEH_solarCellEfficiency(self)
    def setSolarCellSize(self, *args): return _TOSSIM.SEH_setSolarCellSize(self, *args)
    def setSolarCellEfficiency(self, *args): return _TOSSIM.SEH_setSolarCellEfficiency(self, *args)
SEH_swigregister = _TOSSIM.SEH_swigregister
SEH_swigregister(SEH)

class Variable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Variable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Variable, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _TOSSIM.new_Variable(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _TOSSIM.delete_Variable
    __del__ = lambda self : None;
    def getData(self): return _TOSSIM.Variable_getData(self)
Variable_swigregister = _TOSSIM.Variable_swigregister
Variable_swigregister(Variable)

class Mote(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Mote, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Mote, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _TOSSIM.new_Mote(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _TOSSIM.delete_Mote
    __del__ = lambda self : None;
    def id(self): return _TOSSIM.Mote_id(self)
    def euid(self): return _TOSSIM.Mote_euid(self)
    def setEuid(self, *args): return _TOSSIM.Mote_setEuid(self, *args)
    def bootTime(self): return _TOSSIM.Mote_bootTime(self)
    def bootAtTime(self, *args): return _TOSSIM.Mote_bootAtTime(self, *args)
    def isOn(self): return _TOSSIM.Mote_isOn(self)
    def turnOff(self): return _TOSSIM.Mote_turnOff(self)
    def turnOn(self): return _TOSSIM.Mote_turnOn(self)
    def getVariable(self, *args): return _TOSSIM.Mote_getVariable(self, *args)
    def addNoiseTraceReading(self, *args): return _TOSSIM.Mote_addNoiseTraceReading(self, *args)
    def createNoiseModel(self): return _TOSSIM.Mote_createNoiseModel(self)
    def generateNoise(self, *args): return _TOSSIM.Mote_generateNoise(self, *args)
Mote_swigregister = _TOSSIM.Mote_swigregister
Mote_swigregister(Mote)

class Tossim(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Tossim, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Tossim, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _TOSSIM.new_Tossim(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _TOSSIM.delete_Tossim
    __del__ = lambda self : None;
    def init(self): return _TOSSIM.Tossim_init(self)
    def time(self): return _TOSSIM.Tossim_time(self)
    def ticksPerSecond(self): return _TOSSIM.Tossim_ticksPerSecond(self)
    def setTime(self, *args): return _TOSSIM.Tossim_setTime(self, *args)
    def timeStr(self): return _TOSSIM.Tossim_timeStr(self)
    def currentNode(self): return _TOSSIM.Tossim_currentNode(self)
    def getNode(self, *args): return _TOSSIM.Tossim_getNode(self, *args)
    def setCurrentNode(self, *args): return _TOSSIM.Tossim_setCurrentNode(self, *args)
    def addChannel(self, *args): return _TOSSIM.Tossim_addChannel(self, *args)
    def removeChannel(self, *args): return _TOSSIM.Tossim_removeChannel(self, *args)
    def randomSeed(self, *args): return _TOSSIM.Tossim_randomSeed(self, *args)
    def runNextEvent(self): return _TOSSIM.Tossim_runNextEvent(self)
    def radio(self): return _TOSSIM.Tossim_radio(self)
    def seh(self): return _TOSSIM.Tossim_seh(self)
Tossim_swigregister = _TOSSIM.Tossim_swigregister
Tossim_swigregister(Tossim)

# This file is compatible with both classic and new-style classes.


