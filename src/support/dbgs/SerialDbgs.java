/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'SerialDbgs'
 * message type.
 */

public class SerialDbgs extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 8;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 137;

    /** Create a new SerialDbgs of size 8. */
    public SerialDbgs() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new SerialDbgs of the given data_length. */
    public SerialDbgs(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new SerialDbgs with the given data_length
     * and base offset.
     */
    public SerialDbgs(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new SerialDbgs using the given byte array
     * as backing store.
     */
    public SerialDbgs(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new SerialDbgs using the given byte array
     * as backing store, with the given base offset.
     */
    public SerialDbgs(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new SerialDbgs using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public SerialDbgs(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new SerialDbgs embedded in the given message
     * at the given base offset.
     */
    public SerialDbgs(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new SerialDbgs embedded in the given message
     * at the given base offset and length.
     */
    public SerialDbgs(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <SerialDbgs> \n";
      try {
        s += "  [dbg=0x"+Long.toHexString(get_dbg())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [d0=0x"+Long.toHexString(get_d0())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [d1=0x"+Long.toHexString(get_d1())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [d2=0x"+Long.toHexString(get_d2())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: dbg
    //   Field type: short, unsigned
    //   Offset (bits): 0
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'dbg' is signed (false).
     */
    public static boolean isSigned_dbg() {
        return false;
    }

    /**
     * Return whether the field 'dbg' is an array (false).
     */
    public static boolean isArray_dbg() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'dbg'
     */
    public static int offset_dbg() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'dbg'
     */
    public static int offsetBits_dbg() {
        return 0;
    }

    /**
     * Return the value (as a short) of the field 'dbg'
     */
    public short get_dbg() {
        return (short)getUIntElement(offsetBits_dbg(), 8);
    }

    /**
     * Set the value of the field 'dbg'
     */
    public void set_dbg(short value) {
        setUIntElement(offsetBits_dbg(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'dbg'
     */
    public static int size_dbg() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'dbg'
     */
    public static int sizeBits_dbg() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: d0
    //   Field type: int, unsigned
    //   Offset (bits): 16
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'd0' is signed (false).
     */
    public static boolean isSigned_d0() {
        return false;
    }

    /**
     * Return whether the field 'd0' is an array (false).
     */
    public static boolean isArray_d0() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'd0'
     */
    public static int offset_d0() {
        return (16 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'd0'
     */
    public static int offsetBits_d0() {
        return 16;
    }

    /**
     * Return the value (as a int) of the field 'd0'
     */
    public int get_d0() {
        return (int)getUIntElement(offsetBits_d0(), 16);
    }

    /**
     * Set the value of the field 'd0'
     */
    public void set_d0(int value) {
        setUIntElement(offsetBits_d0(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'd0'
     */
    public static int size_d0() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'd0'
     */
    public static int sizeBits_d0() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: d1
    //   Field type: int, unsigned
    //   Offset (bits): 32
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'd1' is signed (false).
     */
    public static boolean isSigned_d1() {
        return false;
    }

    /**
     * Return whether the field 'd1' is an array (false).
     */
    public static boolean isArray_d1() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'd1'
     */
    public static int offset_d1() {
        return (32 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'd1'
     */
    public static int offsetBits_d1() {
        return 32;
    }

    /**
     * Return the value (as a int) of the field 'd1'
     */
    public int get_d1() {
        return (int)getUIntElement(offsetBits_d1(), 16);
    }

    /**
     * Set the value of the field 'd1'
     */
    public void set_d1(int value) {
        setUIntElement(offsetBits_d1(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'd1'
     */
    public static int size_d1() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'd1'
     */
    public static int sizeBits_d1() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: d2
    //   Field type: int, unsigned
    //   Offset (bits): 48
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'd2' is signed (false).
     */
    public static boolean isSigned_d2() {
        return false;
    }

    /**
     * Return whether the field 'd2' is an array (false).
     */
    public static boolean isArray_d2() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'd2'
     */
    public static int offset_d2() {
        return (48 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'd2'
     */
    public static int offsetBits_d2() {
        return 48;
    }

    /**
     * Return the value (as a int) of the field 'd2'
     */
    public int get_d2() {
        return (int)getUIntElement(offsetBits_d2(), 16);
    }

    /**
     * Set the value of the field 'd2'
     */
    public void set_d2(int value) {
        setUIntElement(offsetBits_d2(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'd2'
     */
    public static int size_d2() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'd2'
     */
    public static int sizeBits_d2() {
        return 16;
    }

}
