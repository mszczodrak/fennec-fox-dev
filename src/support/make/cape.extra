CAPE_DIR = $(CAPE_FOX_LIB)
CAPE_FLAGS=-I$(CAPE_DIR) -DCAPEFOX

GCC=gcc
GPP=g++
OPTFLAGS = -g -O0
LIBS = -lm -lstdc++ 
PFLAGS += -tossim -fnesc-nido-tosnodes=1000 -fnesc-simulate -fnesc-nido-motenumber=sim_node\(\) $(CAPE_FLAGS)
WFLAGS = -Wno-nesc-data-race
PYTHON_VERSION ?= $(shell python --version 2>&1 | sed 's/Python 2\.\([0-9]\)\.[0-9]+\{0,1\}/2.\1/')

BUILDDIR = CAPE

OBJFILE = $(BUILDDIR)/sim.o

CSFFILE         = $(CAPE_DIR)/sim_serial_forwarder.c
CSFOBJFILE      = $(BUILDDIR)/c-sf.o
SFFILE          = $(CAPE_DIR)/SerialForwarder.c 
SFOBJFILE       = $(BUILDDIR)/sf.o

PYFILE          = $(CAPE_DIR)/tossim_wrap.cxx
PYOBJFILE       = $(BUILDDIR)/pytossim.o

CXXFILE     	= $(CAPE_DIR)/tossim.c
CXXOBJFILE  	= $(BUILDDIR)/tossim.o
HASHFILE    	= $(CAPE_DIR)/hashtable.c
HASHOBJFILE 	= $(BUILDDIR)/c-support.o

PYDIR       	= /usr/include/python$(PYTHON_VERSION)
SIMDIR      	= $(CAPE_FOX_LIB)
XML         	= app.xml

DUMPTYPES = -fnesc-dump=components -fnesc-dump=variables -fnesc-dump=constants -fnesc-dump=typedefs -fnesc-dump=interfacedefs -fnesc-dump=tags

ifeq ($(findstring darwin, $(OSTYPE)), darwin)
  PLATFORM_FLAGS=-fPIC
  PLATFORM_CC_FLAGS=-bundle
  SHARED_OBJECT=_TOSSIMmodule.so
  PLATFORM_BUILD_FLAGS=-flat_namespace -undefined suppress 
  PLATFORM_LIB_FLAGS = -lstdc++ 
else # linux
  PLATFORM_FLAGS=-shared -fPIC
  SHARED_OBJECT=_TOSSIMmodule.so
  PLATFORM_LIB_FLAGS = -lstdc++ 
  PLATFORM_BUILD_FLAGS= -shared -fPIC
endif
 
BUILD_DEPS = sim-exe

# lib/tossim has to come at the end in order to ensure basic TOSSIM
# implementations are the last resort, so put it directly in the call

sim-exe: builddir $(BUILD_EXTRA_DEPS) FORCE
	@echo "  placing object files in $(BUILDDIR)"
	@echo "  writing XML schema to $(XML)"
	@echo "  compiling $(COMPONENT) to object file sim.o"
	$(NCC) -c $(PLATFORM_FLAGS) -o $(OBJFILE) $(OPTFLAGS) $(PFLAGS) \
		$(CFLAGS) $(WFLAGS) $(COMPONENT).nc $(LDFLAGS)  $(DUMPTYPES) \
		-fnesc-dumpfile=$(XML)

	@echo "  compiling Python support and C libraries into pytossim.o, \
		tossim.o, and c-support.o"
	$(GPP) -c $(PLATFORM_CC_FLAGS) $(PLATFORM_FLAGS) -o $(PYOBJFILE) \
		$(OPTFLAGS) $(CFLAGS) $(SIM_CFLAGS) $(CAPE_FLAGS) $(PYFILE) \
		-I$(PYDIR) -I$(SIMDIR) -DHAVE_CONFIG_H 
	$(GPP) -c $(PLATFORM_CC_FLAGS) $(PLATFORM_FLAGS) -o $(CXXOBJFILE) \
		$(OPTFLAGS) $(CFLAGS) $(SIM_CFLAGS) $(CAPE_FLAGS) $(CXXFILE) \
		-I$(PYDIR) -I$(SIMDIR)
	$(GPP) -c $(PLATFORM_CC_FLAGS) $(PLATFORM_FLAGS) -o $(HASHOBJFILE) \
		$(OPTFLAGS) $(CFLAGS) $(SIM_CFLAGS) $(CAPE_FLAGS) $(HASHFILE) 
		-I$(PYDIR) -I$(SIMDIR)

	@echo "  compiling sf support and C libraries into sf.o, c-sf.o"
	$(GPP) -c $(PLATFORM_CC_FLAGS) $(PLATFORM_FLAGS) -o $(CSFOBJFILE) \
		$(OPTFLAGS) $(CFLAGS) $(SIM_CFLAGS) $(CAPE_FLAGS) $(CSFFILE) \
		-I$(PYDIR) -I$(SIMDIR)
	$(GPP) -c $(PLATFORM_CC_FLAGS) $(PLATFORM_FLAGS) -o $(SFOBJFILE) \
		$(OPTFLAGS) $(CFLAGS) $(SIM_CFLAGS) $(CAPE_FLAGS) $(SFFILE) \
		-I$(PYDIR) -I$(SIMDIR)

	@echo "  linking into shared object ./$(SHARED_OBJECT)"
	$(GPP) $(PLATFORM_BUILD_FLAGS) $(PLATFORM_CC_FLAGS) $(PYOBJFILE) \
		$(OBJFILE) $(CXXOBJFILE) $(HASHOBJFILE) $(CSFOBJFILE) \
		$(SFOBJFILE) $(PLATFORM_LIB_FLAGS) $(LIBS) -o $(SHARED_OBJECT)
	@echo "  copying Python script interface TOSSIM.py from lib/tossim to local directory"
	@cp $(CAPE_DIR)/TOSSIM.py .
	@rm -rf $(BUILDDIR)
	@echo " "
	@echo "*** Successfully built CAPE library. "

